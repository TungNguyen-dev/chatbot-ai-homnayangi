import streamlit as st
from openai import OpenAI

from src.config.settings import settings
from src.context.embeddings import EmbeddingsManager
from src.core.prompt_builder import PromptBuilder
from src.utils.detect_ingredients import detect_ingredients
from src.utils.detect_user_type import detect_user_type
from src.utils.get_meal_time import get_meal_time_from_hour

# === üß© Function Definition Metadata ===
DEFINITION = {
    "type": "function",
    "function": {
        "name": "recommend_food",
        "description": (
            "G·ª£i √Ω m√≥n ƒÉn ph√π h·ª£p d·ª±a tr√™n b·ªëi c·∫£nh h·ªôi tho·∫°i c·ªßa ng∆∞·ªùi d√πng, "
            "bao g·ªìm lo·∫°i ng∆∞·ªùi d√πng (c√° nh√¢n ho·∫∑c gia ƒë√¨nh), nguy√™n li·ªáu s·∫µn c√≥, "
            "v√† th·ªùi ƒëi·ªÉm trong ng√†y. "
            "H√†m n√†y ƒë∆∞·ª£c g·ªçi khi ng∆∞·ªùi d√πng h·ªèi v·ªÅ vi·ªác n√™n ƒÉn g√¨, "
            "v√≠ d·ª•: 'H√¥m nay ƒÉn g√¨', 'T·ªëi nay ƒÉn g√¨', ho·∫∑c c√°c c√¢u h·ªèi t∆∞∆°ng t·ª±."
        ),
        "examples": [
            {
                "user_input": "T·ªëi nay c·∫£ nh√† ƒÉn g√¨ ƒë∆∞·ª£c?",
                "detected_context": {
                    "serving_type": "family",
                    "ingredients": "th·ªãt b√≤, rau c·∫£i",
                    "meal_type": "evening"
                },
                "example_call": {
                    "name": "recommend_food",
                    "arguments": {
                        "serving_type": "family",
                        "ingredients": "th·ªãt b√≤, rau c·∫£i",
                        "meal_type": "evening"
                    },
                },
                "example_output": {
                    "recommendation": (
                        "**G·ª£i √Ω m√≥n ƒÉn:** L·∫©u b√≤ ho·∫∑c b√≤ x√†o rau c·∫£i\n"
                        "**L√Ω do ƒë·ªÅ xu·∫•t:** Ph√π h·ª£p cho b·ªØa t·ªëi gia ƒë√¨nh, d·ªÖ n·∫•u v√† ƒë·∫ßy ƒë·ªß dinh d∆∞·ª°ng.\n"
                        "**C√°ch chu·∫©n b·ªã:** D√πng th·ªãt b√≤ th√°i m·ªèng, n·∫•u v·ªõi rau c·∫£i ho·∫∑c x√†o c√πng h√†nh t·ªèi."
                    )
                },
            },
        ],
    },
}


# === ‚öôÔ∏è Core Function ===
def handle(llm_client, args: dict):
    """
    Generate a food recommendation based on conversation context.

    Context includes:
      - User type (personal/family)
      - Mentioned ingredients
      - Time of day (meal type)
      - Conversation history
      - Vector search context (if available)
    """
    try:
        messages = []
        history = st.session_state.messages
        user_message = history[-1]["content"]

        # === 1Ô∏è‚É£ Base System Instruction ===
        prompt_builder = PromptBuilder()
        predefined_prompt = prompt_builder.build_system_message()

        system_intro = (
            "You are a culinary assistant AI specializing in Vietnamese cuisine. "
            "Your task is to recommend dishes that are delicious, practical, "
            "and suitable for the user's situation.\n\n"
            "Always consider:\n"
            "- Who will eat (personal or family)\n"
            "- Mentioned or available ingredients\n"
            "- The current meal time (breakfast, lunch, dinner)\n\n"
            "If information is missing, politely ask for clarification "
            "instead of making assumptions.\n\n"
            "---\n"
            "### üìã RESPONSE FORMAT (output in Vietnamese)\n"
            "Always respond using the following structure:\n\n"
            "**G·ª£i √Ω m√≥n ƒÉn:** <t√™n m√≥n ch√≠nh ho·∫∑c th·ª±c ƒë∆°n>\n"
            "**L√Ω do ƒë·ªÅ xu·∫•t:** <v√¨ sao m√≥n n√†y ph√π h·ª£p>\n"
            "**C√°ch chu·∫©n b·ªã (n·∫øu c·∫ßn):** <g·ª£i √Ω s∆° l∆∞·ª£c v·ªÅ c√°ch ch·∫ø bi·∫øn ho·∫∑c nguy√™n li·ªáu b·ªï sung>\n\n"
            "If there are multiple suitable dishes, list up to 3 options using bullet points."
        )

        messages.append({
            "role": "system",
            "content": f"{system_intro}\n\n---\nPredefined prompt:\n{predefined_prompt}"
        })

        # === 2Ô∏è‚É£ Detect Serving Type ===
        serving_type = detect_user_type(llm_client, {"message": history})
        if serving_type == "unknown":
            return "B·∫°n mu·ªën chu·∫©n b·ªã b·ªØa ƒÉn cho c√° nh√¢n hay cho gia ƒë√¨nh?"
        messages.append({"role": "system", "content": f"- Serving type: {serving_type}"})

        # === 3Ô∏è‚É£ Add Conversation History ===
        messages.append({"role": "system", "content": f"- Conversation history: {history}"})

        # === 4Ô∏è‚É£ Detect Ingredients ===
        ingredients = detect_ingredients(history)
        if ingredients:
            messages.append(
                {"role": "system", "content": f"- Ingredients mentioned: {ingredients}"})

        # === 5Ô∏è‚É£ Determine Meal Type ===
        meal_type = get_meal_time_from_hour()
        if meal_type:
            messages.append({"role": "system", "content": f"- Meal time: {meal_type}"})

        # === 6Ô∏è‚É£ Retrieve Vector Context (RAG) ===
        context_info = ""
        embeddings = EmbeddingsManager()
        if embeddings.enabled:
            # Ch·ªâ l∆∞u n·∫øu c√≥ "t√¥i th√≠ch", "t√¥i mu·ªën", ho·∫∑c ch·ª©a t√™n m√≥n ƒÉn
            if any(keyword in user_message.lower() for keyword in ["t√¥i th√≠ch", "t√¥i mu·ªën", "mu·ªën", "th√≠ch"]):
                embeddings.add_text(user_message, metadata={"role": "user"})
        
        # üÜï 3Ô∏è‚É£ Truy v·∫•n vector DB xem c√≥ m√≥n n√†o ph√π h·ª£p v·ªõi c√¢u h·ªèi ho·∫∑c s·ªü th√≠ch kh√¥ng
        similar_items = []
        if embeddings.enabled:
            similar_items = embeddings.search_similar(user_message, n_results=3)

        # üÜï 4Ô∏è‚É£ N·∫øu c√≥ k·∫øt qu·∫£, t·∫°o ƒëo·∫°n context ƒë·ªÉ AI d√πng
        context_info = ""
        if similar_items:
            context_info = (
                    "Th√¥ng tin tham kh·∫£o ƒë∆∞·ª£c truy xu·∫•t t·ª´ c∆° s·ªü d·ªØ li·ªáu (c√≥ th·ªÉ h·ªØu √≠ch cho c√¢u h·ªèi):\n\n"
                    + "\n".join(f"- {item}" for item in similar_items)
            )
        print(context_info)

        if context_info:
            # T·∫°o prompt r√µ r√†ng cho LLM bi·∫øt c√°ch d√πng context
            rag_prompt = {
                "role": "system",
                "content": (
                    "B·∫°n l√† tr·ª£ l√Ω AI chuy√™n t∆∞ v·∫•n v·ªÅ ·∫©m th·ª±c. "
                    "H√£y s·ª≠ d·ª•ng th√¥ng tin d∆∞·ªõi ƒë√¢y ƒë·ªÉ gi√∫p tr·∫£ l·ªùi c√¢u h·ªèi ng∆∞·ªùi d√πng n·∫øu ph√π h·ª£p.\n\n"
                    f"{context_info}"
                ),
            }

            # Ch√®n v√†o sau message system ƒë·∫ßu ti√™n
            if messages and messages[0]["role"] == "system":
                messages.insert(1, rag_prompt)
            else:
                messages.insert(0, rag_prompt)

        # === 7Ô∏è‚É£ Final User Message ===
        messages.append({"role": "user", "content": user_message})

        # === 8Ô∏è‚É£ Generate Streamed Response ===
        client = OpenAI(
            base_url=settings.OPENAI_BASE_URL,
            api_key=settings.OPENAI_API_KEY,
        )

        stream = client.chat.completions.create(
            model=settings.OPENAI_MODEL,
            messages=messages,
            temperature=settings.OPENAI_TEMPERATURE,
            max_completion_tokens=settings.OPENAI_MAX_TOKENS,
            stream=True,
        )

        return st.write_stream(stream)

    except Exception as e:
        print(f"[ERROR] Food recommendation failed: {e}")
        return "Xin l·ªói, h·ªá th·ªëng g·∫∑p l·ªói khi g·ª£i √Ω m√≥n ƒÉn. Vui l√≤ng th·ª≠ l·∫°i sau."
